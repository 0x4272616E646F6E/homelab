# checkov:skip=CKV_K8S_22: Bazarr requires write file system access
# checkov:skip=CKV_K8S_23: Bazarr requires privileged access
# checkov:skip=CKV_K8S_37: Bazarr requires capabilities
# checkov:skip=CKV_K8S_40: Bazarr requires UID/GID 1000 to match permissions on mounted volumes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
  namespace: media
  labels:
    app.kubernetes.io/name: bazarr
    app.kubernetes.io/managed-by: flux
  annotations:
    checkov.io/skip1: CKV_K8S_22=Requires a writable filesystem (s6-overlay and app runtime)
    checkov.io/skip2: CKV_K8S_23=s6-overlay preinit requires root; process drops to PUID/PGID 1000 afterward
    checkov.io/skip3: CKV_K8S_37=Requires specific Linux capabilities; risky ones are dropped
    checkov.io/skip4: CKV_K8S_40=Requires UID/GID 1000 to match permissions on mounted volumes
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bazarr
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bazarr
        app.kubernetes.io/managed-by: flux
      annotations:
        checkov.io/skip1: CKV_K8S_22=Requires a writable filesystem (s6-overlay and app runtime)
        checkov.io/skip2: CKV_K8S_23=s6-overlay preinit requires root; process drops to PUID/PGID 1000 afterward
        checkov.io/skip3: CKV_K8S_37=Requires specific Linux capabilities; risky ones are dropped
        checkov.io/skip4: CKV_K8S_40=Requires UID/GID 1000 to match permissions on mounted volumes
    spec:
      runtimeClassName: youki
      securityContext:
        runAsNonRoot: false
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: false
      containers:
        - name: bazarr
          # renovate: datasource=docker depName=lscr.io/linuxserver/bazarr
          image: lscr.io/linuxserver/bazarr:latest@sha256:750251d7dcf245d05ad6b2b0c39685282df43a8582875fa31ab2a9328af64e26
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6767
              protocol: TCP
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "1500m"
              memory: "1536Mi"
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          securityContext:
            runAsNonRoot: false
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - NET_RAW
                - MKNOD
                - AUDIT_WRITE
                - SETFCAP
          startupProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 18
          livenessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /config
            - name: media
              mountPath: /media
              subPath: media
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: bazarr-config
        - name: media
          persistentVolumeClaim:
            claimName: media
        - name: tmp
          emptyDir: {}
