apiVersion: apps/v1
kind: Deployment
metadata:
  name: vllm-gpt-oss-20b
  namespace: development
  labels:
    app.kubernetes.io/name: vllm-gpt-oss-20b
    app.kubernetes.io/managed-by: flux
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vllm-gpt-oss-20b
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate: { maxSurge: 0, maxUnavailable: 1 }
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vllm-gpt-oss-20b
        app.kubernetes.io/managed-by: flux
    spec:
      runtimeClassName: nvidia
      terminationGracePeriodSeconds: 3600
      securityContext:
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
      initContainers:
      - name: fix-permissions
        image: busybox:1.36
        command:
          - sh
          - -c
          - >
            mkdir -p \
              /home/vllm/.cache/huggingface \
              /home/vllm/.cache/hf \
              /home/vllm/.cache/torch \
              /home/vllm/.cache \
              /vllm-workspace \
              /tmp/torchinductor_cache &&
            chown -R 10001:10001 /home/vllm /dev/shm /tmp /var/tmp /vllm-workspace || true
        volumeMounts:
        - { name: cache-volume,     mountPath: /home/vllm/.cache/huggingface }
        - { name: shm,              mountPath: /dev/shm }
        - { name: tmp,              mountPath: /tmp }
        - { name: var-tmp,          mountPath: /var/tmp }
        - { name: vllm-workspace,   mountPath: /vllm-workspace }
      containers:
      - name: vllm
        # renovate: datasource=docker depName=docker.io/vllm/vllm-openai
        image: docker.io/vllm/vllm-openai:v0.10.2
        imagePullPolicy: IfNotPresent
        args:
          - --model
          - openai/gpt-oss-20b
          - --tensor-parallel-size
          - "1"
          - --max-model-len
          - "32768"
          - --kv-cache-dtype
          - fp8_e5m2
          - --max-num-seqs
          - "1"
          - --gpu-memory-utilization
          - "0.92"
          - --enable-chunked-prefill
          - --async-scheduling
          - --enable-prefix-caching
          - --cpu-offload-gb
          - "2"
          - --swap-space
          - "8"
          - --max-parallel-loading-workers
          - "2"
        env:
        - name: HUGGING_FACE_HUB_TOKEN
          valueFrom: { secretKeyRef: { name: vllm-secrets, key: token } }
        - { name: VLLM_ATTENTION_BACKEND,    value: TRITON_ATTN_VLLM_V1 }
        - { name: VLLM_LOGGING_LEVEL,        value: INFO }
        - { name: PYTORCH_CUDA_ALLOC_CONF,   value: "expandable_segments:True" }
        - { name: NCCL_P2P_DISABLE,          value: "1" }
        - { name: NCCL_IB_DISABLE,           value: "1" }
        - { name: HF_HUB_ENABLE_HF_TRANSFER, value: "1" }
        - { name: HOME,                      value: /home/vllm }
        - { name: XDG_CACHE_HOME,            value: /home/vllm/.cache }
        - { name: TORCH_HOME,                value: /home/vllm/.cache/torch }
        - { name: HF_HOME,                   value: /home/vllm/.cache/hf }
        - { name: HUGGINGFACE_HUB_CACHE,     value: /home/vllm/.cache/huggingface }
        - { name: TORCHINDUCTOR_CACHE_DIR,   value: /tmp/torchinductor_cache }
        - { name: TMPDIR, value: /tmp }
        - { name: TEMP,   value: /tmp }
        - { name: TMP,    value: /tmp }
        ports:
        - { containerPort: 8000, name: http }
        resources:
          requests: { cpu: "2", memory: "24Gi", nvidia.com/gpu: "1" }
          limits:   { cpu: "4", memory: "24Gi", nvidia.com/gpu: "1" }
        securityContext:
          runAsUser: 10001
          runAsGroup: 10001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
        volumeMounts:
        - { name: cache-volume,   mountPath: /home/vllm/.cache/huggingface }
        - { name: shm,            mountPath: /dev/shm }
        - { name: tmp,            mountPath: /tmp }
        - { name: var-tmp,        mountPath: /var/tmp }
        - { name: vllm-workspace, mountPath: /vllm-workspace }
        readinessProbe:
          httpGet: { path: /health, port: http }
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 60
        startupProbe:
          httpGet: { path: /health, port: http }
          periodSeconds: 10
          failureThreshold: 540
        lifecycle:
          postStart:
            exec:
              command: ["bash","-lc","nvidia-smi || true; ls -l /dev/nvidia* || true"]
      volumes:
      - name: cache-volume
        persistentVolumeClaim: { claimName: gpt-oss-20b-pvc }
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: "16Gi"
      - name: tmp
        emptyDir: {}
      - name: var-tmp
        emptyDir: {}
      - name: vllm-workspace
        emptyDir: {}