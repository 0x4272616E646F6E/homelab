apiVersion: apps/v1
kind: Deployment
metadata:
  name: code-server
  namespace: development
  labels:
    app.kubernetes.io/name: code-server
    app.kubernetes.io/managed-by: flux
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: code-server
      app.kubernetes.io/managed-by: flux
  template:
    metadata:
      labels:
        app.kubernetes.io/name: code-server
        app.kubernetes.io/managed-by: flux
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      automountServiceAccountToken: false
      containers:
        - name: code-server
        # renovate: datasource=docker depName=docker.io/codercom/code-server:latest
          image: docker.io/codercom/code-server:latest@sha256:f9ed058d6b1a4aa80846f77902d344bd97e450aec69201a0f8939baf58b18a5f
          imagePullPolicy: IfNotPresent
          env:
            - name: PATH
              value: "/home/coder/.local/bin:/usr/local/bin:/usr/bin:/bin"
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - -c
                  - |
                    mkdir -p $HOME/.nixpkgs
                    cat > $HOME/.nixpkgs/config.nix << 'EOL'
                    {
                      allowUnfree = true;
                    }
                    EOL
                    
                    # Set up bash profile for Nix
                    if ! grep -q "Nix setup" $HOME/.bashrc; then
                      cat >> $HOME/.bashrc << 'EOF'
                      
                    # Nix setup
                    if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
                      . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
                    fi
                    
                    # Set up nix-shell with direnv for project-specific environments
                    if command -v nix-shell &> /dev/null; then
                      alias nixify='echo "use nix" > .envrc && direnv allow'
                      alias flakify='echo "use flake" > .envrc && direnv allow'
                    fi
                    EOF
                    fi
                    
                    # Install Nix if not already installed
                    if [ ! -e /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
                      mkdir -p $HOME/.local/bin
                      
                      # Install Nix using Determinate Systems installer with --init none
                      curl -fsSL https://get.determinate.systems/nix/installer/script.sh | \
                        bash -s -- install --no-confirm --init none
                      
                      # Source nix settings
                      . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
                      
                      # Add nix channel
                      nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
                      nix-channel --update
                    fi
                    
                    # Add .local/bin to PATH
                    if ! grep -q ".local/bin" $HOME/.bashrc; then
                      echo 'export PATH=$HOME/.local/bin:$PATH' >> $HOME/.bashrc
                    fi
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: "1"
              memory: "2Gi"
            limits:
              cpu: "2"
              memory: "4Gi"
          volumeMounts:
            - name: config
              mountPath: /home/coder
            - name: tmp
              mountPath: /tmp
            - name: nix-store
              mountPath: /nix
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: code-server-config
        - name: tmp
          emptyDir: 
            medium: Memory
        - name: nix-store
          persistentVolumeClaim:
            claimName: code-server-nix-store
