apiVersion: apps/v1
kind: Deployment
metadata:
  name: code-server
  namespace: development
  labels:
    app.kubernetes.io/name: code-server
    app.kubernetes.io/managed-by: flux
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: code-server
      app.kubernetes.io/managed-by: flux
  template:
    metadata:
      labels:
        app.kubernetes.io/name: code-server
        app.kubernetes.io/managed-by: flux
    spec:
      runtimeClassName: youki
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      automountServiceAccountToken: false

      initContainers:
        - name: install-nix
          image: docker.io/alpine:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -lc
            - |
              set -euxo pipefail
              # Ensure required tools are present for the Nix installer
              apk add --no-cache curl xz tar bash ca-certificates coreutils su-exec
              update-ca-certificates || true

              export HOME=/home/coder
              mkdir -p /nix "$HOME"
              # Make sure user 1000 can write to /nix and $HOME
              chown -R 1000:1000 /nix "$HOME"

              if [ ! -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
                echo "Installing Nix (no-daemon) into $HOME and /nix as uid 1000 (safe untar)..."
                TMPDIR=$(mktemp -d)
                ver=2.31.1
                # Download binary tarball
                curl -fsSL -o "$TMPDIR/nix.tar.xz" "https://releases.nixos.org/nix/nix-${ver}/nix-${ver}-x86_64-linux.tar.xz"
                # Extract without trying to apply ownership/permissions (rootless-friendly)
                su-exec 1000:1000 sh -lc "cd $TMPDIR && tar --no-same-owner --no-same-permissions -xJf nix.tar.xz"
                # Create minimal nix.conf with sandbox disabled (container-friendly)
                su-exec 1000:1000 sh -lc 'mkdir -p "$HOME/.config/nix"; echo "sandbox = false" > "$HOME/.config/nix/nix.conf"'
                # Run bundled installer from the extracted tree
                su-exec 1000:1000 sh -lc "cd $TMPDIR/nix-${ver}-x86_64-linux && HOME=$HOME sh install --no-daemon"
                rm -rf "$TMPDIR"
              else
                echo "Nix already installed, skipping."
              fi
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          volumeMounts:
            - name: config
              mountPath: /home/coder
            - name: nix-store
              mountPath: /nix

      containers:
        - name: code-server
        # renovate: datasource=docker depName=docker.io/codercom/code-server:latest
          image: docker.io/codercom/code-server:latest@sha256:f9ed058d6b1a4aa80846f77902d344bd97e450aec69201a0f8939baf58b18a5f
          imagePullPolicy: IfNotPresent
          env:
            - name: PATH
              value: "/home/coder/.nix-profile/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            - name: NIX_PROFILES
              value: "/home/coder/.nix-profile"
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: "1"
              memory: "2Gi"
            limits:
              cpu: "2"
              memory: "4Gi"
          volumeMounts:
            - name: config
              mountPath: /home/coder
            - name: nix-store
              mountPath: /nix
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: code-server-config
        - name: nix-store
          emptyDir: {}
