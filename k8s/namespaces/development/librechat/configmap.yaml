apiVersion: v1
kind: ConfigMap
metadata:
  name: librechat-config-map
  namespace: development
data:
  values.yaml: |-
    replicaCount: 1

    global:
      # existing Secret for all envs/ only Passwords. Can be locally generated with: kubectl create secret generic librechat-secret-envs --from-env-file=.env.example --dry-run=client -o yaml > secret-envs.yaml
      # For better maintainabillity, you can put all vars directly in the config Section and only overwrite Secrets with this if nessesary.
      # Required Values:
      # - MEILI_MASTER_KEY
      librechat:
        existingSecretName: "librechat-secrets"
        # Used for Setting the Right Key, can be something like AZURE_API_KEY, if Azure OpenAI is used
        existingSecretApiKey: OPENAI_API_KEY

    librechat:
      configEnv:
        PLUGIN_MODELS: gpt-4,gpt-4-turbo-preview,gpt-4-0125-preview,gpt-4-1106-preview,gpt-4-0613,gpt-3.5-turbo,gpt-3.5-turbo-0125,gpt-3.5-turbo-1106,gpt-3.5-turbo-0613
        DEBUG_PLUGINS: "true"
        # IMPORTANT -- GENERATE your own: openssl rand -hex 32 and openssl rand -hex 16 for CREDS_IV. Best Practise: Put into Secret. See global.librechat.existingSecretName
        # CREDS_KEY: 
        # CREDS_IV: 
        # JWT_SECRET: 
        # JWT_REFRESH_SECRET: 
        # Set Config Params here
        # ENV_NAME: env-value
        
        ALLOW_EMAIL_LOGIN: "true"
        ALLOW_REGISTRATION: "true"
        ALLOW_SOCIAL_LOGIN: "false"
        ALLOW_SOCIAL_REGISTRATION: "false"

        # existing Secret for all envs/ only Passwords. Can be locally generated with: kubectl create secret generic librechat-secret-envs --from-env-file=.env.example --dry-run=client -o yaml > secret-envs.yaml
        # For better maintainabillity, you can put all vars directly in the config Section and only overwrite Secrets with this if nessesary.
        # Required Values:
        # - MEILI_MASTER_KEY
      existingSecretName: "librechat-secrets"
      
      # For adding a custom config yaml-file you can set the contents in this var. See https://www.librechat.ai/docs/configuration/librechat_yaml/example
      # configYamlContent: ""
      configYamlContent: |
        version: 1.2.9

        cache: true

        interface:
          # Privacy policy settings
          privacyPolicy:
            externalUrl: 'https://librechat.ai/privacy-policy'
            openNewTab: true

          # Terms of service
          termsOfService:
            externalUrl: 'https://librechat.ai/tos'
            openNewTab: true
        endpoints:
          custom:
            - name: "vLLM"
              apiKey: "vllm"
              baseURL: "http://http-gpt-oss-20b/v1"
              models:
                default: ['openai/gpt-oss-20b']
                fetch: true
              titleConvo: true
              titleModel: "current_model"
              titleMessageRole: "user"
              summarize: false
              summaryModel: "current_model"
              forcePrompt: false
        # registration:
        #   socialLogins: ["discord", "facebook", "github", "google", "openid"] 

      # name of existing Yaml configmap, key must be librechat.yaml
      # existingConfigYaml: ""

      # Volume used to store image Files uploaded to the Web UI
      imageVolume:
        enabled: true
        size: 10G
        accessModes: ReadWriteOnce
        storageClassName: "local-path-rwo"

    # only lite RAG is supported
    librechat-rag-api:
      enabled: false
      # can be azure, openai, huggingface or huggingfacetei
      embeddingsProvider: openai


    image:
      repository: danny-avila/librechat
      registry: ghcr.io
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""


    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""

    # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Automatically mount a ServiceAccount's API credentials?
      automount: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    lifecycle: {}
    # # base for adding a custom banner // see https://github.com/danny-avila/LibreChat/pull/3952 for an example
    #   postStart:
    #     exec:
    #       command: ["/bin/sh", "-c", "npm run update-banner <displayFrom(Format: yyyy-mm-ddTHH:MM:SSZ)> <displayTo(Format: yyyy-mm-ddTHH:MM:SSZ)> <message> <isPublic(true/false)>"]



    podAnnotations: {}
    podLabels: {}

    podSecurityContext:
      fsGroup: 2000

    securityContext:
      capabilities:
        drop:
        - ALL
      # readOnlyRootFilesystem: true # not supported yet
      runAsNonRoot: true
      runAsUser: 1000

    service:
      type: ClusterIP
      port: 3080
      annotations: {}

    ingress:
      enabled: false
      className: ""
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: librechat.oglesby.io
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chat.example.com

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi


    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    livenessProbe:
      httpGet:
        path: /health
        port: http
    readinessProbe:
      httpGet:
        path: /health
        port: http

    # Additional volumes on the output Deployment definition.
    volumes: []
    # - name: foo
    #   secret:
    #     secretName: mysecret
    #     optional: false

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts: []
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true

    nodeSelector: {}

    tolerations: []

    affinity: {}

    # Strategy for LibreChat deployment updates
    updateStrategy:
      type: RollingUpdate

    # MongoDB Parameters
    mongodb:
      enabled: true
      auth:
        enabled: false
      databases:
      - LibreChat
    #  persistence: 
    #    size: 8Gi


    meilisearch:
      enabled: true
      persistence:
        enabled: true
        storageClass: "local-path-rwo"
      image: 
        tag: "v1.7.3"
      auth:
        # Use an existing Kubernetes secret for the MEILI_MASTER_KEY
        existingMasterKeySecret: "librechat-secrets"
