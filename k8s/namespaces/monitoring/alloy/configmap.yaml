apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config-map
  namespace: monitoring
data:
  values.yaml: |-
    nameOverride: alloy

    alloy:
      controller:
        type: daemonset
        tolerations:
          - key: node-role.kubernetes.io/control-plane
            operator: Exists
            effect: NoSchedule
          - key: node-role.kubernetes.io/master
            operator: Exists
            effect: NoSchedule
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9464"
        podLabels:
          app.kubernetes.io/component: telemetry-gateway
      podSecurityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
        runAsNonRoot: false
      securityContext:
        privileged: true
      mounts:
        varlog: true
        dockercontainers: true
      volumes:
        extra:
          - name: pod-logs
            hostPath:
              path: /var/log/pods
              type: DirectoryOrCreate
      extraVolumeMounts:
        - name: pod-logs
          mountPath: /var/log/pods
          readOnly: true
      extraPorts:
        - name: otlp-grpc
          port: 4317
          targetPort: 4317
        - name: otlp-http
          port: 4318
          targetPort: 4318
        - name: prom-metrics
          port: 9464
          targetPort: 9464
        - name: syslog-udp
          port: 1514
          targetPort: 1514
          protocol: UDP
        - name: syslog-tcp
          port: 1514
          targetPort: 1514
          protocol: TCP
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          cpu: 1000m
          memory: 768Mi
      configMap:
        create: true
        content: |
          logging {
            level  = "info"
            format = "logfmt"
          }

          local.file_match "pod_logs" {
            path_targets = [
              {
                __path__ = "/var/log/pods/*/*/*.log",
                job       = "kubernetes-pods",
              },
            ]
          }

          loki.write "default" {
            endpoint {
              url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
            }
          }

          loki.source.file "pods" {
            targets    = local.file_match.pod_logs.targets
            forward_to = [loki.process.pods.receiver]
          }

          loki.process "pods" {
            stage.regex {
              expression = ".+/var/log/pods/(?P<namespace>[^_]+)_(?P<pod>[^_]+)_[^/]+/(?P<container>[^/]+)/(?P<stream>[^/]+).log"
              source     = "filename"
            }

            stage.labels {
              values = {
                cluster   = "talos-single-node",
                namespace = "{{ .namespace }}",
                pod       = "{{ .pod }}",
                container = "{{ .container }}",
                stream    = "{{ .stream }}",
              }
            }

            stage.json {
              source = "log"
              drop_malformed = true
            }

            stage.output {
              source = "log"
            }

            forward_to = [loki.write.default.receiver]
          }

          otelcol.exporter.prometheus "self" {
            endpoint = "0.0.0.0:9464"
          }

          otelcol.exporter.otlp "tempo" {
            client {
              endpoint = "tempo.monitoring.svc.cluster.local:4317"
              tls {
                insecure = true
              }
            }
          }

          otelcol.processor.batch "metrics" {
            output {
              metrics = [otelcol.exporter.prometheus.self.input]
            }
          }

          otelcol.processor.batch "traces" {
            output {
              traces = [otelcol.exporter.otlp.tempo.input]
            }
          }

          otelcol.processor.batch "logs" {
            output {
              logs = [loki.write.default.receiver]
            }
          }

          otelcol.receiver.otlp "ingest" {
            protocols {
              grpc {
                endpoint = "0.0.0.0:4317"
              }
              http {
                endpoint = "0.0.0.0:4318"
              }
            }

            output {
              metrics = [otelcol.processor.batch.metrics.input]
              logs    = [otelcol.processor.batch.logs.input]
              traces  = [otelcol.processor.batch.traces.input]
            }
          }

          loki.source.syslog "syslog" {
            tcp {
              listen_address = "0.0.0.0:1514"
            }
            udp {
              listen_address = "0.0.0.0:1514"
            }
            labels = {
              job     = "external-syslog",
              source  = "syslog",
              cluster = "talos-single-node",
            }
            forward_to = [loki.process.syslog.receiver]
          }

          loki.process "syslog" {
            forward_to = [loki.write.default.receiver]
          }

    service:
      enabled: true
      type: ClusterIP
      extraPorts:
        - name: otlp-grpc
          port: 4317
          targetPort: 4317
        - name: otlp-http
          port: 4318
          targetPort: 4318
        - name: prom-metrics
          port: 9464
          targetPort: 9464
        - name: syslog-udp
          protocol: UDP
          port: 1514
          targetPort: 1514
        - name: syslog-tcp
          protocol: TCP
          port: 1514
          targetPort: 1514

    serviceMonitor:
      enabled: true
      interval: 30s
      additionalLabels:
        release: prometheus
