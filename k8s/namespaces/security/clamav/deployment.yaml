apiVersion: apps/v1
kind: Deployment
metadata:
  name: clamav
  namespace: security
  labels:
    app.kubernetes.io/name: clamav
    app.kubernetes.io/component: daemon
    app.kubernetes.io/managed-by: flux
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: clamav
      app.kubernetes.io/component: daemon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clamav
        app.kubernetes.io/component: daemon
        app.kubernetes.io/managed-by: flux
    spec:
      automountServiceAccountToken: false
      initContainers:
        - name: fix-permissions
          image: docker.io/busybox:1.37@sha256:fba0711bd6995f7e0158f397d85f63998b4c8b1a1e3b1e9e0394c7b165585440
          command:
            - sh
            - -c
            - |
              chown -R 100:101 /var/lib/clamav
              chmod -R 755 /var/lib/clamav
          volumeMounts:
            - name: clamav-data
              mountPath: /var/lib/clamav
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
        - name: init-db
          # renovate: datasource=docker depName=clamav/clamav
          image: docker.io/clamav/clamav:1.5@sha256:323cec50d1d950d9b5f5c42f64610a4a4102d6f18c38060af6d8513f43137805
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Checking virus signature database..."
              if [ ! -f /var/lib/clamav/main.cvd ] && [ ! -f /var/lib/clamav/main.cld ]; then
                echo "Database not found, running initial FreshClam update..."
                freshclam --config-file=/etc/clamav/freshclam.conf
              else
                echo "Database already exists, skipping initial update"
              fi
              echo "Database check complete"
          volumeMounts:
            - name: clamav-data
              mountPath: /var/lib/clamav
            - name: config
              mountPath: /etc/clamav/freshclam.conf
              subPath: freshclam.conf
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "2000m"
              memory: "2Gi"
      containers:
        - name: clamd
          # renovate: datasource=docker depName=clamav/clamav
          image: clamav/clamav:1.5@sha256:323cec50d1d950d9b5f5c42f64610a4a4102d6f18c38060af6d8513f43137805
          imagePullPolicy: IfNotPresent
          ports:
            - name: clamd
              containerPort: 3310
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 3310
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 3310
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: clamav-data
              mountPath: /var/lib/clamav
            - name: config
              mountPath: /etc/clamav/clamd.conf
              subPath: clamd.conf
            - name: logs
              mountPath: /var/log/clamav
            - name: run
              mountPath: /run/clamav
            - name: lock
              mountPath: /var/lock
          resources:
            requests:
              cpu: "1000m"
              memory: "2Gi"
            limits:
              cpu: "4000m"
              memory: "4Gi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 100
            runAsGroup: 101
            capabilities:
              drop:
                - ALL
      volumes:
        - name: clamav-data
          persistentVolumeClaim:
            claimName: clamav-data
        - name: config
          configMap:
            name: clamav-config
        - name: logs
          emptyDir: {}
        - name: run
          emptyDir: {}
        - name: lock
          emptyDir: {}
